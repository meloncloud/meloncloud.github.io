{"posts":[{"title":"Git本地账户切换","text":"1、运行如下命令查看当前Git用户 1git config user.name 查看当前Git邮箱 1git config user.email 切换Git用户名 1git config --global user.name YOURUSERNAME 切换Git邮箱 1git config --global user.email YOUREMAIL 2、Github账户将Github里获得的文件id_rsa和id_rsa.pub放入如下目录 1C:\\Users\\YOURACCOUNT\\.ssh","link":"/changegitaccount/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment A mysterious code1cuczs2UXA4XbFXw5okM9OnsAg8vlDjhF More info: Writing","link":"/hello-world/"},{"title":"Nginx流量转发配置","text":"将 Nginx web 服务器配置为作为 http 流量的反向代理。例如，可以使用此功能将请求转发到远程服务器上的特定子目录。从客户端的角度来看，客户端从它所访问的主机加载内容。但是 Nginx 会从远程服务器加载实际内容并将其转发给客户端 1、Nginx配置文件修改注意：stream节点与http节点同级修改/etc/nginx/nginx.conf文件，在文件的第4行后面添加include /etc/nginx/conf.d/*.stream 1234……include /etc/nginx/modules-enabled/*.conf;include /etc/nginx/conf.d/*.stream;…… 2、添加配置文件在/etc/nginx/conf.d/目录下添加配置文件，文件的内容大致格式如下： 1234567891011stream { upstream backend { server ip:port; } server { listen port; proxy_connect_timeout 20s; proxy_timeout 5m; proxy_pass backend; }}","link":"/nginxstreamconfig/"},{"title":"VPS关闭IPV6","text":"现在IPv4+IPv6双栈的服务器越来越普及，但有些设备不支持或其他原因需要关闭IPV6。 1、编辑sysctl配置文件1vim /etc/sysctl.conf 文件末尾添加以下内容 123net.ipv6.conf.all.disable_ipv6 = 1net.ipv6.conf.default.disable_ipv6 = 1net.ipv6.conf.lo.disable_ipv6 = 1 保存文件并退出编辑器 2、运行以下命令应用更改1sysctl -p 3、验证IPv6是否已禁用1ip a | grep inet6 没有输出代表已经成功 4、如果重启后失效创建/etc/rc.local文件，文件内容如下： 12345#!/bin/bash# /etc/rc.local/etc/sysctl.d/etc/init.d/procps restartexit 0 赋予执行权限 1chmod 755 /etc/rc.local","link":"/diableipv6/"},{"title":"使用 Cloudflare DDNS","text":"Cloudflare 的 DDNS 功能允许您通过 API 更新您的域名解析记录，使之适用于动态 IP 地址。如果您还没有 Cloudflare 账户，请访问 Cloudflare 官方网站 并进行注册。 1、获取 API 密钥1.1、登录到您的 Cloudflare 账户。1.2、点击右上角的头像，然后选择 “My Profile” 或 “我的个人资料”。1.3、在左侧导航中，选择 “API Tokens” 或 “API 令牌”。1.4、点击 “Create Token” 或 “创建令牌”。 1.5、选择 “Edit Zone DNS” 和 “Zone: Read” 权限。1.6、点击 “Continue” 或 “继续”。1.7、在下一步中，为令牌指定名称并生成令牌。 2、2.1、在您的服务器上创建一个脚本文件，比如 cloudflare_ddns.sh。2.2、使用您喜欢的文本编辑器编辑脚本文件。2.3、将以下脚本内容粘贴到文件中，并用您的信息替换 &lt;YOUR_EMAIL&gt;、&lt;YOUR_API_KEY&gt;、&lt;YOUR_ZONE_ID&gt; 和 &lt;YOUR_DOMAIN&gt;。 12345678910111213#!/bin/bashEMAIL=&quot;&lt;YOUR_EMAIL&gt;&quot;API_KEY=&quot;&lt;YOUR_API_KEY&gt;&quot;ZONE_ID=&quot;&lt;YOUR_ZONE_ID&gt;&quot;DOMAIN=&quot;&lt;YOUR_DOMAIN&gt;&quot;IP=\\$(curl -s https://api.ipify.org)curl -X PUT &quot;https://api.cloudflare.com/client/v4/zones/\\$ZONE_ID/dns_records/\\$DOMAIN&quot; \\ -H &quot;Authorization: Bearer \\$API_KEY&quot; \\ -H &quot;Content-Type: application/json&quot; \\ --data &quot;{\\&quot;type\\&quot;:\\&quot;A\\&quot;,\\&quot;name\\&quot;:\\&quot;\\$DOMAIN\\&quot;,\\&quot;content\\&quot;:\\&quot;\\$IP\\&quot;,\\&quot;ttl\\&quot;:120,\\&quot;proxied\\&quot;:false}&quot; 2.4、保存并退出编辑器。 3、运行 DDNS 脚本3.1、打开终端或命令行界面。3.2、导航到您保存脚本文件的目录。3.3、运行脚本：bash cloudflare_ddns.sh 4、定时更新 DDNS 记录4.1、您可以使用定时任务来定期运行 DDNS 脚本，以便在 IP 地址变化时自动更新域名解析记录。以下是一个 cron 示例，将 DDNS 脚本每小时运行一次。4.2、打开终端或命令行界面。4.3、输入 crontab -e 并按 Enter 键。4.4、在 crontab 编辑器中添加以下行，然后保存并关闭编辑器： 1*/1 * * * * /bin/bash /path/to/cloudflare_ddns.sh 将 /path/to/cloudflare_ddns.sh 替换为实际脚本文件的路径。","link":"/cloudflaredns/"},{"title":"Linux上更换DNS设置的教程","text":"正确配置您的DNS设置可以帮助您更快地上网浏览和更安全的在线体验。根据您的Linux发行版及其版本，有多种方法可以访问网络配置。本指南将重点介绍命令行界面以获得更广泛的兼容性。 1、备份您当前的设置在进行任何更改之前，最好备份当前的网络配置： 1cp /etc/resolv.conf /etc/resolv.conf.backup 此命令将您当前的DNS设置复制到备份文件 2、编辑DNS设置2.1、使用文本编辑器（例如vim）打开 resolv.conf 文件 1vim /etc/resolv.conf 2.2、进入编辑器后，您会看到以 nameserver 开头的行。这些行表示您当前的DNS设置。2.3、要更改DNS，您可以编辑现有的 nameserver 行或添加新行。例如，要使用Google的公共DNS，添加： 12nameserver 8.8.8.8nameserver 8.8.4.4 2.4、保存并退出编辑器。 3、重新启动网络服务为了使更改生效，您可能需要重新启动网络服务： 1systemctl restart NetworkManager 或者，根据您的Linux发行版： 1/etc/init.d/networking restart 4、验证DNS更改为确保您的DNS设置已更新，您可以使用： 1cat /etc/resolv.conf","link":"/modifydnsonlinux/"},{"title":"DNSEXIT的DDNS自动化配置","text":"DNSExit从2001年开始提供免费域名DNS解析和动态DNS解析, 后续又陆续推出了免费二级域名、免费企业邮箱、免费SSL安全证书等免费服务。DNSExit提供了.work.gd、.line.pm、.linkpc.net、.run.place、.publicvm.com这几种免费二级域名供你选择注册, 同样也具有域名DNS解析及动态DNS解析功能，但不支持修改DNS服务器，也就是只能用DNSExit提供的DNS解析功能。DNSExit免费二级域名最多开通1年，可在到期前30天免费续期。另外提醒一下，DNSExit的免费二级域名在有些省份被屏蔽使用了，个人测试还可以用一下，不要用在重要场合。查询域名是否被拦截污染可以用拨测。DNSExit免费企业邮箱，有100M容量，可建立2个邮箱，支持邮件转发，支持POP3、IMAP、SMTP及网页收发邮件，每天限制对外发送20封邮件。DNSExit免费企业邮箱一次只能开通1年，不过可以在到期前的45天内免费续期。DNSExit还提供了一键申请Let’s Encrypt的免费SSL安全证书，支持泛解析域名SSL证书，可无限子域名使用，免费证书有效期90天，可在到期前30天免费续期。 1、自动化本机DDNS的脚本： 1234567891011121314151617181920212223242526272829303132333435363738394041#!/bin/bashDNSAPIKEY=[apikey]DNSHOST=[domain]WANIPSITE=&quot;http://ipv4.icanhazip.com&quot;WAN_IP=$(curl -s ${WANIPSITE})WAN_IP_FILE=wanip.txt# Get current and old WAN IPif [ -f $WAN_IP_FILE ]; then OLD_WAN_IP=$(cat $WAN_IP_FILE)else echo &quot;No File, Need IP&quot; OLD_WAN_IP=&quot;&quot;fi# If WAN IP is unchanged, exit hereif [ &quot;$WAN_IP&quot; = &quot;$OLD_WAN_IP&quot; ]; then echo &quot;Local Check: IP not changed. Exiting...&quot; exit 0fi# If WAN is changed, update！echo &quot;Updating DNS to $WAN_IP&quot;RESPONSE=$(curl -s https://api.dnsexit.com/dns/ud/?apikey=$DNSAPIKEY -d host=$DNSHOST)# Check the response codeCODE=$(echo $RESPONSE | jq -r '.code')if [ &quot;$CODE&quot; -eq 0 ]; then echo &quot;Remote Response: DNS update successful. Exiting...&quot; echo $WAN_IP &gt; $WAN_IP_FILE echo -e &quot;Updated successfully!&quot; exit 0elif [ &quot;$CODE&quot; -eq 1 ]; then echo &quot;Remote Response: IP not changed. Exiting...&quot; echo $WAN_IP &gt; $WAN_IP_FILEelse echo &quot;Remote Response: $RESPONSE&quot; exit 1fi 2、通用方式（包括修改、增加DNS的操作）命令的格式如下： 1curl -H &quot;Content-Type: application/json&quot; --data @/path/jason-file https://api.dnsexit.com/dns/ Json文件如下格式： 2.1、更新IPV412345678910{ &quot;apikey&quot;: &quot;API-KEY&quot;, &quot;domain&quot;: &quot;example.com&quot;, &quot;update&quot;: { &quot;type&quot;: &quot;A&quot;, &quot;name&quot;: &quot;example.com&quot;, &quot;content&quot;: &quot;1.1.1.1&quot;, &quot;ttl&quot;: 480 }} 2.2、更新CNAME12345678910{ &quot;apikey&quot;: &quot;API-KEY&quot;, &quot;domain&quot;:&quot;example.com&quot;, &quot;update&quot;:{ &quot;type&quot;:&quot;CNAME&quot;, &quot;name&quot;:&quot;mail&quot;, //or &quot;name&quot;:&quot;mail.example.com&quot; &quot;content&quot;:&quot;mail.yahoo.com&quot;, //point to mail.yahoo.com instead &quot;ttl&quot;:480 //ttl value is in minutes 480 = 6 hours }} 2.3、新增IPV412345678910{ &quot;apikey&quot;: &quot;API-KEY&quot;, &quot;domain&quot;:&quot;example.com&quot;, &quot;add&quot;:{ &quot;type&quot;:&quot;A&quot;, &quot;name&quot;:&quot;host1&quot;, //same as host1.example.com &quot;content&quot;:&quot;1.1.2.2&quot;, //IP of the host &quot;ttl&quot;:480 }} 2.4、新增CNAME12345678910{ &quot;apikey&quot;: &quot;API-KEY&quot;, &quot;domain&quot;:&quot;example.com&quot;, &quot;add&quot;:{ &quot;type&quot;:&quot;CNAME&quot;, &quot;name&quot;:&quot;mail&quot;, //this actually setup mail.example.com points to mail.yahoo.com &quot;content&quot;:&quot;mail.yahoo.com&quot;, //content is the canonical host name &quot;ttl&quot;:480 //ttl value is in minutes 480 = 6 hours }} 2.5、删除CNAME12345678{ &quot;apikey&quot;: &quot;API-KEY&quot;, &quot;domain&quot;:&quot;example.com&quot;, &quot;delete&quot;:{ &quot;type&quot;:&quot;CNAME&quot;, &quot;name&quot;:&quot;mail&quot; //instead you can put mail.example.com }}","link":"/dnsexitapi/"},{"title":"Json操作","text":"修改Json文件中的某项值假设有Json文件n.json，内容如下： 12345678{ &quot;ofdfzpzc&quot;: { &quot;krcmqd&quot;: &quot;_a2W5j93p7PgKp&quot;, &quot;gcrdn&quot;: -205118896.62164715 }, &quot;xwzztgrnxasc&quot;: -1855478139.7060483022, &quot;fqivnuwadwv&quot;: -1600074029.0195124} 现在想把xwzztgrnxasc的值修改为2022，可以用如下语句修改： 1jq '.xwzztgrnxasc=2022' n.json &gt; conf.tmp &amp;&amp; mv conf.tmp n.json","link":"/aboutjson/"},{"title":"Xray配置方法【直连、做中转、做落地】","text":"本配置包含了一台海外的VPS做直连机、做中转机、做落地机的所有配置。 1、直连机使用的为 inbounds:IN-VLESS，协议为 xtls-rprx-vision 2、中转机分别用不同的端口对于不同的落地机落地机A：inbounds:IN-VLESS-205 -&gt; outbounds:OUT-SOCKS-205, 翻墙用的协议为 xtls-rprx-vision，翻墙后用socks5协议连落地机A落地机B：inbounds:IN-VLESS-179 -&gt; outbounds:OUT-SOCKS-179, 翻墙用的协议为 xtls-rprx-vision，翻墙后用socks5协议连落地机B 3、落地机inbounds:IN-SOCKS, 落地协议为socks5 4、具体配置{ &quot;log&quot;: { &quot;loglevel&quot;: &quot;none&quot;, &quot;access&quot;: &quot;none&quot;, &quot;error&quot;: &quot;none&quot; }, &quot;inbounds&quot;: [ { &quot;tag&quot;: &quot;IN-VLESS&quot;, &quot;listen&quot;: &quot;0.0.0.0&quot;, &quot;port&quot;: 443, &quot;protocol&quot;: &quot;vless&quot;, &quot;settings&quot;: { &quot;clients&quot;: [ { &quot;id&quot;: &quot;UUID&quot;, &quot;flow&quot;: &quot;xtls-rprx-vision&quot; } ], &quot;decryption&quot;: &quot;none&quot; }, &quot;streamSettings&quot;: { &quot;network&quot;: &quot;tcp&quot;, &quot;security&quot;: &quot;reality&quot;, &quot;realitySettings&quot;: { &quot;show&quot;: false, &quot;dest&quot;: &quot;www.icloud.com:443&quot;, &quot;xver&quot;: 0, &quot;serverNames&quot;: [ &quot;icloud.com&quot;, &quot;www.icloud.com&quot; ], &quot;privateKey&quot;: &quot;PRIVATEKEY&quot;, &quot;minClientVer&quot;: &quot;&quot;, &quot;maxClientVer&quot;: &quot;&quot;, &quot;maxTimeDiff&quot;: 0, &quot;shortIds&quot;: [ &quot;88&quot;, &quot;888888&quot; ] } } }, { &quot;tag&quot;: &quot;IN-VLESS-205&quot;, &quot;listen&quot;: &quot;0.0.0.0&quot;, &quot;port&quot;: 10800, &quot;protocol&quot;: &quot;vless&quot;, &quot;settings&quot;: { &quot;clients&quot;: [ { &quot;id&quot;: &quot;UUID&quot;, &quot;flow&quot;: &quot;xtls-rprx-vision&quot; } ], &quot;decryption&quot;: &quot;none&quot; }, &quot;streamSettings&quot;: { &quot;network&quot;: &quot;tcp&quot;, &quot;security&quot;: &quot;reality&quot;, &quot;realitySettings&quot;: { &quot;show&quot;: false, &quot;dest&quot;: &quot;www.icloud.com:443&quot;, &quot;xver&quot;: 0, &quot;serverNames&quot;: [ &quot;icloud.com&quot;, &quot;www.icloud.com&quot; ], &quot;privateKey&quot;: &quot;PRIVATEKEY&quot;, &quot;minClientVer&quot;: &quot;&quot;, &quot;maxClientVer&quot;: &quot;&quot;, &quot;maxTimeDiff&quot;: 0, &quot;shortIds&quot;: [ &quot;88&quot;, &quot;888888&quot; ] } } }, { &quot;tag&quot;: &quot;IN-VLESS-179&quot;, &quot;listen&quot;: &quot;0.0.0.0&quot;, &quot;port&quot;: 3389, &quot;protocol&quot;: &quot;vless&quot;, &quot;settings&quot;: { &quot;clients&quot;: [ { &quot;id&quot;: &quot;UUID&quot;, &quot;flow&quot;: &quot;xtls-rprx-vision&quot; } ], &quot;decryption&quot;: &quot;none&quot; }, &quot;streamSettings&quot;: { &quot;network&quot;: &quot;tcp&quot;, &quot;security&quot;: &quot;reality&quot;, &quot;realitySettings&quot;: { &quot;show&quot;: false, &quot;dest&quot;: &quot;www.icloud.com:443&quot;, &quot;xver&quot;: 0, &quot;serverNames&quot;: [ &quot;icloud.com&quot;, &quot;www.icloud.com&quot; ], &quot;privateKey&quot;: &quot;PRIVATEKAY&quot;, &quot;minClientVer&quot;: &quot;&quot;, &quot;maxClientVer&quot;: &quot;&quot;, &quot;maxTimeDiff&quot;: 0, &quot;shortIds&quot;: [ &quot;88&quot;, &quot;888888&quot; ] } } }, { &quot;tag&quot;: &quot;IN-SOCKS&quot;, &quot;listen&quot;: &quot;0.0.0.0&quot;, &quot;port&quot;: 10810, &quot;protocol&quot;: &quot;socks&quot;, &quot;sniffing&quot;: { &quot;enabled&quot;: true, &quot;destOverride&quot;: [ &quot;http&quot;, &quot;tls&quot; ], &quot;routeOnly&quot;: false }, &quot;settings&quot;: { &quot;auth&quot;: &quot;password&quot;, &quot;udp&quot;: true, &quot;allowTransparent&quot;: false, &quot;accounts&quot;: [ { &quot;user&quot;: &quot;USERNAME&quot;, &quot;pass&quot;: &quot;PASSWORD&quot; } ] } } ], &quot;outbounds&quot;: [ { &quot;protocol&quot;: &quot;freedom&quot;, &quot;tag&quot;: &quot;direct&quot; }, { &quot;tag&quot;: &quot;OUT-SOCKS-205&quot;, &quot;protocol&quot;: &quot;socks&quot;, &quot;settings&quot;: { &quot;servers&quot;: [ { &quot;address&quot;: &quot;HOST A IP&quot;, &quot;ota&quot;: false, &quot;port&quot;: HOST A SOCKS5 PORT, &quot;level&quot;: 1, &quot;users&quot;: [ { &quot;user&quot;: &quot;HOST A SOCKS USERNAME&quot;, &quot;pass&quot;: &quot;HOST A SOCKS PASSWORD&quot;, &quot;level&quot;: 1 } ] } ] }, &quot;streamSettings&quot;: { &quot;network&quot;: &quot;tcp&quot; }, &quot;mux&quot;: { &quot;enabled&quot;: false, &quot;concurrency&quot;: -1 } }, { &quot;tag&quot;: &quot;OUT-SOCKS-179&quot;, &quot;protocol&quot;: &quot;socks&quot;, &quot;settings&quot;: { &quot;servers&quot;: [ { &quot;address&quot;: &quot;HOST B IP&quot;, &quot;ota&quot;: false, &quot;port&quot;: HOST B SOCKS5 PORT, &quot;level&quot;: 1, &quot;users&quot;: [ { &quot;user&quot;: &quot;HOST B SOCKS USERNAME&quot;, &quot;pass&quot;: &quot;HOST B SOCKS PASSWORD&quot;, &quot;level&quot;: 1 } ] } ] }, &quot;streamSettings&quot;: { &quot;network&quot;: &quot;tcp&quot; }, &quot;mux&quot;: { &quot;enabled&quot;: false, &quot;concurrency&quot;: -1 } }, { &quot;protocol&quot;: &quot;blackhole&quot;, &quot;tag&quot;: &quot;blocked&quot; } ], &quot;dns&quot;: { &quot;servers&quot;: [ &quot;8.8.8.8&quot;, &quot;1.1.1.1&quot; ] }, &quot;routing&quot;: { &quot;domainStrategy&quot;: &quot;AsIs&quot;, &quot;rules&quot;: [ { &quot;type&quot;: &quot;field&quot;, &quot;inboundTag&quot;: [ &quot;IN-VLESS-205&quot; ], &quot;outboundTag&quot;: &quot;OUT-SOCKS-205&quot; }, { &quot;type&quot;: &quot;field&quot;, &quot;inboundTag&quot;: [ &quot;IN-VLESS-179&quot; ], &quot;outboundTag&quot;: &quot;OUT-SOCKS-179&quot; } ] }}","link":"/xrayconfig/"},{"title":"Woocommerce 自定义SEO","text":"WordPress + Woocommerce 是世界上用得最多的电商开发工具，但是设置上总是不能满足我们多样的需求，接下来，我将从订制的角度来阐述如何如何给产品增加meta标签，并用meta标签实现给Google喂数据，从而满足Google对产品搜索要求。 1、在woocommerce后台增加SEO选项卡 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465// 在后台增加一个选项卡，显示的名字是SEO，这个选项卡的值是seo_product_dataadd_filter( 'woocommerce_product_data_tabs', 'bd_product_settings_tabs' );function bd_product_settings_tabs( $tabs ){ //unset( $tabs[ 'shipping' ] ); $tabs[ 'SEO' ] = array( 'label' =&gt; 'SEO', 'target' =&gt; 'seo_product_data', 'class' =&gt; array( 'show_if_virtual' ), 'priority' =&gt; 21, ); return $tabs;}// 在SEO选项卡(seo_product_data)里面增加输入框，让用户能输入自己想要的内容add_action( 'woocommerce_product_data_panels', 'seo_product_panels' );function seo_product_panels(){ echo '&lt;div id=&quot;seo_product_data&quot; class=&quot;panel woocommerce_options_panel hidden&quot;&gt;'; woocommerce_wp_text_input( array( 'id' =&gt; 'bd_keyword', 'value' =&gt; 'Default Value', //直接写的默认值 'label' =&gt; 'KeyWord', //输入框前面的提示 'description' =&gt; 'In put keyword', //输入框后面的备注 ) ); woocommerce_wp_textarea_input( array( 'id' =&gt; 'bd_description', 'value' =&gt; get_post_meta(get_the_ID(), 'bd_description', true), // 从数据库中读取的值当作默认值 'label' =&gt; 'Description', 'desc_tip' =&gt; true, 'description' =&gt; 'In put Description', ) ); woocommerce_wp_text_input( array( 'id' =&gt; 'bd_value', 'value' =&gt; 22, //默认值22 'label' =&gt; 'Value', 'description' =&gt; 'In put value', ) ); echo '&lt;/div&gt;';}// 将输入框中的数据存储到数据库中，方便在其他地方调用add_action( 'woocommerce_process_product_meta', 'bd_save_fields' );function bd_save_fields( $id ){ update_post_meta( $id, 'bd_keyword', sanitize_text_field( $_POST[ 'bd_keyword' ] ) ); //把bd_keyword的值存入自定义的bd_Keyword中 update_post_meta( $id, 'bd_description', sanitize_textarea_field( $_POST[ 'bd_description' ] ) ); update_post_meta( $id, '_wc_average_rating', sanitize_text_field( $_POST[ 'bd_value' ] ) ); //把bd_value的值存入系统默认的average_rating中} 注意：1、输入框的类型除了例子中的woocommerce_wp_text_input、woocommerce_wp_textarea_input还有woocommerce_wp_checkbox、woocommerce_wp_select2、输入框类型要后后面的sanitize_text_field相对应，除了sanitize_textarea_field外还有absint、sanitize_email、sanitize_title、wp_kses、esc_url_raw3、bd_save_fields中的$id为post即product的ID 2、Meta的应用可以在任何位置用如下方式获取到当前产品的自定义的值： 1&quot;key&quot; =&gt; get_post_meta(get_the_ID(), 'bd_keyword', true), 1$key = get_post_meta(get_the_ID(), 'bd_value', true); 12$product = wc_get_product(); //经过试验，用默认函数时必须要加此行$reviewcount = $product-&gt;get_review_count(); //系统中默认有的函数可以用函数直接读取 3、Google对商品类Meta的要求Google对商品类的Meta要求是要包含：Product、Review、Offer三个。Product类下如果有Offer，那么必须要在Prodcut类下包含review、aggregateRating中的一个或全部，否则会提示非致命错误。详细的修改方法，咱们下期见！","link":"/woocommerceaddproductmeta/"},{"title":"给Google&quot;喂&quot;数据(上)","text":"Woocommerce 开发小组比较倔强，明明谷歌已经提示要改善数据了，但是默认的Woo还是不改；这次为了能达到谷歌的要求，不得不对源码下手了，虽然知道改源码的风险很大，但是还是要改，涉及到推广的事情就必须要去做，尽管可以通过hook来实现，但是本人认为改动太大了。下面是我就Missing field &quot;aggregateRating&quot;和Missing field &quot;review&quot;两项做的改动； 1、class-wc-structured-data.php修改找到文件中下面的位置 12345678…… $markup['offers'] = array( apply_filters( 'woocommerce_structured_data_product_offer', $markup_offer, $product ) );}if ( $product-&gt;get_rating_count() &amp;&amp; wc_review_ratings_enabled() ) { $markup['aggregateRating'] = array( '@type' =&gt; 'AggregateRating',…… 修改为 12345678…… $markup['offers'] = array( apply_filters( 'woocommerce_structured_data_product_offer', $markup_offer, $product ) );}if ( !($product-&gt;get_rating_count() &amp;&amp; wc_review_ratings_enabled()) ) { $markup['aggregateRating'] = array( '@type' =&gt; 'AggregateRating',…… 从程序上可以看出来，要是rating_count值为0并且关闭了review_ratings，数据是不会显示，修改后强行让程序给谷歌”喂”它想要的数值。操作完上面的可以打开aggregateRating相应的数据了，但是到谷歌里面去看提示数据不对，因为谷歌要求ratingValue大于0小于等于5的。好！做假做全套，接下来咱们给谷歌喂想要的假数据！ 2、在functions.php或者插件中加入下面的程序段1234567891011121314151617//更新、保存产品信息时写入到数据库中add_action( 'woocommerce_new_product', 'on_product_save', 10, 1 );add_action( 'woocommerce_update_product', 'on_product_save', 10, 1 );function on_product_save( $product_id ) { $product = wc_get_product( $product_id ); // do something with this product $ratingvalue = get_post_meta(get_the_ID(), 'ratingvalue', true); $reviewcount = get_post_meta(get_the_ID(), 'reviewcount', true); if ( $ratingvalue ) { $ratingvalue = 4.6; } if ( $reviewcount ) { $reviewcount = 38; } update_post_meta( $product-&gt;get_id(), '_wc_average_rating', $ratingvalue ); update_post_meta( $product-&gt;get_id(), '_wc_review_count', $reviewcount );} 那么ratingvalue和reviewCount的数值从哪里来？请看上期的文章[Woocommerce 自定义SEO]","link":"/feeddatatogg/"},{"title":"给Google&quot;喂&quot;数据(下)","text":"上一期通过修改源码的方式解决了Missing field &quot;aggregateRating&quot;和Missing field &quot;review&quot;两项，后来在谷歌后台检测网站时又发现Missing field &quot;hasMerchantReturnPolicy&quot; (in &quot;offers&quot;)和Missing field &quot;shippingDetails&quot; (in &quot;offers&quot;)，总是修改源码不是好的办法，今天把woocommerce网站翻了个遍，终于找到了可以修改Structured Data的hooks了。 1、修改系统现有的Structured Data123456add_filter( 'woocommerce_structured_data_product', function( $schema, $product ) { $schema['name'] = 'Your new products name here'; $schema['description'] = 'Your new products description here'; $schema['image'] = 'Link to your new product image here'; return $schema;}, $priority = 20, $accepted_args = 2 ); 没错，就是这个filter：woocommerce_structured_data_product！ 2、添加系统没有的Structured Data1234567891011121314151617add_filter( 'woocommerce_structured_data_product', function( $schema, $product ) { $schema['brand'] = 'CartBounty'; $schema['review'] = array( '@type' =&gt; 'Review', 'author' =&gt; 'Name of the author here', 'datePublished' =&gt; '2019-10-04', 'name' =&gt; 'Review title here', 'description' =&gt; 'Description of our review here', 'reviewRating' =&gt; array( '@type' =&gt; 'Rating', 'bestRating' =&gt; 5, 'worstRating' =&gt; 1, 'ratingValue' =&gt; 5 ), ); return $schema;}, $priority = 20, $accepted_args = 2 ); 增加数据的办法和修改是一样的，用的同一个filter，但是有没有注意到(in &quot;offers&quot;)这几个字母？说明我们要怎加的参数是在offers里面，但是我们系统中已经有了offers这个参数了，那么我们要在offers里面添加新的参数应该如何操作呢？见下面的代码： 12345678910add_filter( 'woocommerce_structured_data_product_offer', function( $schema, $product ) { $schema['hasMerchantReturnPolicy'] = array( 'applicableCountry' =&gt; 'US', 'returnPolicyCategory' =&gt; 'https://schema.org/MerchantReturnFiniteReturnWindow', 'merchantReturnDays' =&gt; 60, 'returnMethod' =&gt; 'https://schema.org/ReturnByMail', 'returnFees' =&gt; 'https://schema.org/FreeReturn' ); return $schema;}, $priority = 20, $accepted_args = 2 ); 对！用了另外一个filter：woocommerce_structured_data_product_offer，至此就可以把 hasMerchantReturnPolicy 和 shippingDetails 给解决掉了。 3、另外的收获最后送点小知识，要想完全移除Structured Data，用下面的代码可以解决掉： 1234function remove_wc_structured_data() { remove_action( 'wp_footer', array( WC()-&gt;structured_data, 'output_structured_data' ), 10 );}add_action( 'init', 'remove_wc_structured_data' );","link":"/woostructureddata/"},{"title":"端口映射（一）-- Realm","text":"1、访问Github Release页面, 下载最新版程序包1mkdir -p /etc/realm &amp;&amp; cd /etc/realm 1wget https://github.com/zhboner/realm/releases/download/v2.6.2/realm-x86_64-unknown-linux-gnu.tar.gz 运行上面的命令需要注意下载对应系统的包。 1tar -zxvf realm-x86_64-unknown-linux-gnu.tar.gz 1chmod +x realm 2、编辑配置文件123456789101112131415161718192021222324252627282930313233{ &quot;log&quot;: { &quot;level&quot;: &quot;warn&quot; }, &quot;dns&quot;: { &quot;mode&quot;: &quot;ipv4_and_ipv6&quot;, &quot;protocol&quot;: &quot;tcp_and_udp&quot;, &quot;min_ttl&quot;: 0, &quot;max_ttl&quot;: 60, &quot;cache_size&quot;: 5 }, &quot;network&quot;: { &quot;use_udp&quot;: true, &quot;zero_copy&quot;: true, &quot;fast_open&quot;: true, &quot;tcp_timeout&quot;: 300, &quot;udp_timeout&quot;: 30, &quot;send_proxy&quot;: false, &quot;send_proxy_version&quot;: 2, &quot;accept_proxy&quot;: false, &quot;accept_proxy_timeout&quot;: 5 }, &quot;endpoints&quot;: [ { &quot;listen&quot;: &quot;0.0.0.0:12345&quot;, &quot;remote&quot;: &quot;1.1.1.1:54321&quot; }, { &quot;listen&quot;: &quot;0.0.0.0:1234&quot;, &quot;remote&quot;: &quot;2.2.2.2:4321&quot; } ]} 测试运行 1./realm -c config.json 3、设置开机启动(通用方法)1vim /etc/systemd/system/realm.service 12345678910111213141516[Unit]Description=realmAfter=network-online.targetWants=network-online.target systemd-networkd-wait-online.service [Service]Type=simpleUser=rootRestart=on-failureRestartSec=5sDynamicUser=trueWorkingDirectory=/etc/realmExecStart=/etc/realm/realm -c /etc/realm/config.json [Install]WantedBy=multi-user.target 1systemctl enable realm","link":"/forward1/"},{"title":"端口映射（二）-- Redir &#x2F; iptables","text":"1、Redir1.1、安装Redir1apt install redir -y 1.2、配置将本地11510端口转到192.168.180.10的443端口 1redir :11510 192.168.180.10:443 2、iptablesiptables配置太复杂了，来个一键脚本吧。 1bash &lt;(curl -fsSL https://raw.githubusercontent.com/arloor/iptablesUtils/master/natcfg.sh)","link":"/forward2/"},{"title":"Docker常用命令大全汇总","text":"Docker是一种流行的容器化平台，可以在一个独立的、隔离的环境中构建、部署和运行应用程序。了解Docker常用命令可以帮助我们更高效地管理容器，快速开发和部署应用。本文将整理一系列Docker的常用命令，便于日常使用和学习。 1 Docker基础命令1.1 启动/停止/重启docker123456# 启动systemctl start docker# 停止systemctl stop docker# 重启systemctl restart docker 1.2 设置开机自启动1234# 设置systemctl enable docker# 取消开机自启动systemctl disable docker 1.3 查看docker状态1systemctl status docker 1.4 查看版本信息1docker version 该命令显示当前安装的Docker客户端和服务器版本信息。 1.5 显示Docker系统信息1docker info 该命令展示关于Docker安装的详细信息，包括运行容器的数量、镜像的数量、存储驱动、网络配置等。 1.6 查看帮助1docker --help 2 镜像管理命令2.1 搜索镜像1docker search [镜像名] 在镜像仓库上搜索指定的名称的镜像，默认是Docker Hub。 1docker search nginx 不过企业一般会使用harbor搭建自己的镜像仓库 2.2 下载镜像1docker pull [镜像名]:[标签] 下载指定的镜像到本地。如果不指定标签，则默认下载latest版本。例如： 1docker pull nginx:latest 2.3 列出本地镜像1docker images 列出本地所有镜像，显示镜像ID、仓库、标签、大小等信息。 2.4 删除镜像1docker rmi [镜像ID或镜像名] 删除本地的某个镜像。例如： 1docker rmi nginx:latest -f 参数可以执行强制删除镜像 1docker rmi -f mysql 删除全部镜像（慎用） 1docker rmi -f $(docker images -aq) -a 意思为显示全部, -q 意思为只显示ID 2.5 构建镜像1docker build -t [镜像名]:[标签] [Dockerfile所在路径] 从指定路径的Dockerfile构建一个新的镜像。例如从当前路径构建 1docker build -t nginx:1.0 . 2.6 导入镜像12docker load -i 镜像保存文件位置docker load -i /data/nginx.tar 2.7 保存镜像12docker save -o 保存的目标文件名称 镜像名docker save -o /data/nginx.tar nginx 保存后的镜像可以使用load加载到其他服务器上。 2.8 给镜像打标签12docker tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG]docker tag nginx 10.10.10.200/software/nginx:1.26 有时候根据业务需求 需要对一个镜像进行分类或版本迭代操作，此时就需要给镜像打上标签。10.10.10.200为镜像仓库地址，software为镜像仓库名称 3 容器管理命令3.1 创建并运行容器1docker run [选项] [镜像名] -d：后台运行容器 -p：端口映射 –name：指定容器名称 -v：挂载卷;例如-v 主机路径:容器路径 示例：在后台运行一个名为mynginx的nginx容器，并映射端口： 1docker run -d -p 8080:80 --name mynginx nginx 3.2 查看运行中的容器1docker ps 列出当前正在运行的容器，显示容器ID、镜像、状态、端口映射等信息。 3.3 查看所有容器（包括停止的）1docker ps -a 3.4 启动和停止容器12# 启动容器docker start [容器ID或容器名] 12# 停止容器docker stop [容器ID或容器名] 3.5 重启容器1docker restart [容器ID或容器名] 3.6 删除容器1docker rm [容器ID或容器名] 删除指定的容器。如果容器正在运行，可以使用-f强制删除。 3.7 进入容器1docker exec -it [容器ID或容器名] /bin/bash 在容器内启动一个交互式的Shell。例如： 1docker exec -it mynginx /bin/bash 3.8 查看容器日志1docker logs [容器ID或容器名] 查看容器的输出日志。常用选项： -f：实时输出日志。–tail n：显示最后n行日志。例如： 1docker logs -f --tail 20 mynginx 3.9 查看容器内部细节1docker inspect [容器ID或容器名] 4 数据卷管理命令数据卷（Volume）是Docker中持久化数据的关键，通过数据卷可以将容器内的数据持久化到宿主机中。 4.1 创建数据卷12docker volume create [卷名]docker volume create data 4.2 查看数据卷1docker volume ls 列出所有数据卷。 4.3 删除数据卷12docker volume rm [卷名]docker volume rm data 删除指定的数据卷。 4.4 查看数据卷详情1docker volume inspect [卷名] 显示数据卷的详细信息，包括挂载路径。 5 网络管理命令Docker支持创建自定义网络，以便容器之间可以通过自定义网络相互通信。 5.1 创建网络1docker network create [网络名] 创建一个自定义网络，通常是bridge类型的网络。 5.2 查看网络1docker network ls 列出所有网络，包括默认网络。 5.3 查看网络详情1docker network inspect [网络名] 显示指定网络的详细信息，包括连接到该网络的容器信息。 5.4 删除网络1docker network rm [网络名] 删除指定的自定义网络。 5.5 将容器连接到网络1docker network connect [网络名] [容器名或容器ID] 5.6 将容器从网络断开 1docker network disconnect [网络名] [容器名或容器ID] 6 Docker Compose命令Docker Compose是一种定义和运行多容器Docker应用的工具，通过一个docker-compose.yml文件定义应用的服务和配置。 6.1 启动服务1docker-compose up 12# 后台运行docker-compose up -d 根据docker-compose.yml文件中的配置启动所有服务，常用选项：-d：后台运行所有服务。–build：在启动之前重新构建镜像。 6.2 停止服务1docker-compose down 停止并删除所有容器、网络和卷。 6.3 构建或重建服务1docker-compose build 6.4 查看服务状态1docker-compose ps 列出由docker-compose管理的所有服务及其状态。 6.5 查看服务日志1docker-compose logs [服务名] 查看指定服务的日志，常用选项： -f：实时输出日志。–tail n：显示最后n行日志。 7 常用清理命令7.1 清理无用的数据Docker提供了一些简单的清理命令，用于删除不再使用的容器、镜像、卷和网络。 （1）删除所有已停止的容器：1docker container prune （2）删除未使用的镜像：1docker image prune （3）删除所有未使用的数据卷：1docker volume prune （4）删除所有未使用的网络：1docker network prune （5）清理所有未使用的资源（包括镜像、容器、卷和网络）：1docker system prune 通过掌握这些常用命令，可以更轻松地使用Docker进行日常的运维、测试和部署工作。","link":"/docker/"}],"tags":[{"name":"IP","slug":"IP","link":"/tags/IP/"},{"name":"Git","slug":"Git","link":"/tags/Git/"},{"name":"Nginx","slug":"Nginx","link":"/tags/Nginx/"},{"name":"Json","slug":"Json","link":"/tags/Json/"},{"name":"DNS","slug":"DNS","link":"/tags/DNS/"},{"name":"SEO","slug":"SEO","link":"/tags/SEO/"},{"name":"wordpress","slug":"wordpress","link":"/tags/wordpress/"},{"name":"woocommerce","slug":"woocommerce","link":"/tags/woocommerce/"},{"name":"forward","slug":"forward","link":"/tags/forward/"},{"name":"docker","slug":"docker","link":"/tags/docker/"}],"categories":[{"name":"Web","slug":"Web","link":"/categories/Web/"},{"name":"NetWork","slug":"NetWork","link":"/categories/NetWork/"},{"name":"WordPress","slug":"WordPress","link":"/categories/WordPress/"}],"pages":[{"title":"tags","text":"","link":"/tags/index.html"},{"title":"categories","text":"","link":"/categories/index.html"}]}