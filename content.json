{"posts":[{"title":"Git本地账户切换","text":"1、运行如下命令查看当前Git用户 1git config user.name 查看当前Git邮箱 1git config user.email 切换Git用户名 1git config --global user.name YOURUSERNAME 切换Git邮箱 1git config --global user.email YOUREMAIL 2、Github账户将Github里获得的文件id_rsa和id_rsa.pub放入如下目录 1C:\\Users\\YOURACCOUNT\\.ssh","link":"/changegitaccount/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment A mysterious code1cuczs2UXA4XbFXw5okM9OnsAg8vlDjhF More info: Writing","link":"/hello-world/"},{"title":"Nginx流量转发配置","text":"将 Nginx web 服务器配置为作为 http 流量的反向代理。例如，可以使用此功能将请求转发到远程服务器上的特定子目录。从客户端的角度来看，客户端从它所访问的主机加载内容。但是 Nginx 会从远程服务器加载实际内容并将其转发给客户端 1、Nginx配置文件修改注意：stream节点与http节点同级修改/etc/nginx/nginx.conf文件，在文件的第4行后面添加include /etc/nginx/conf.d/*.stream 1234……include /etc/nginx/modules-enabled/*.conf;include /etc/nginx/conf.d/*.stream;…… 2、添加配置文件在/etc/nginx/conf.d/目录下添加配置文件，文件的内容大致格式如下： 1234567891011stream { upstream backend { server ip:port; } server { listen port; proxy_connect_timeout 20s; proxy_timeout 5m; proxy_pass backend; }}","link":"/nginxstreamconfig/"},{"title":"VPS关闭IPV6","text":"现在IPv4+IPv6双栈的服务器越来越普及，但有些设备不支持或其他原因需要关闭IPV6。 1、编辑sysctl配置文件1vim /etc/sysctl.conf 文件末尾添加以下内容 123net.ipv6.conf.all.disable_ipv6 = 1net.ipv6.conf.default.disable_ipv6 = 1net.ipv6.conf.lo.disable_ipv6 = 1 保存文件并退出编辑器 2、运行以下命令应用更改1sysctl -p 3、验证IPv6是否已禁用1ip a | grep inet6 没有输出代表已经成功 4、如果重启后失效创建/etc/rc.local文件，文件内容如下： 12345#!/bin/bash# /etc/rc.local/etc/sysctl.d/etc/init.d/procps restartexit 0 赋予执行权限 1chmod 755 /etc/rc.local","link":"/diableipv6/"},{"title":"使用 Cloudflare DDNS","text":"Cloudflare 的 DDNS 功能允许您通过 API 更新您的域名解析记录，使之适用于动态 IP 地址。如果您还没有 Cloudflare 账户，请访问 Cloudflare 官方网站 并进行注册。 1、获取 API 密钥1.1、登录到您的 Cloudflare 账户。1.2、点击右上角的头像，然后选择 “My Profile” 或 “我的个人资料”。1.3、在左侧导航中，选择 “API Tokens” 或 “API 令牌”。1.4、点击 “Create Token” 或 “创建令牌”。 1.5、选择 “Edit Zone DNS” 和 “Zone: Read” 权限。1.6、点击 “Continue” 或 “继续”。1.7、在下一步中，为令牌指定名称并生成令牌。 2、2.1、在您的服务器上创建一个脚本文件，比如 cloudflare_ddns.sh。2.2、使用您喜欢的文本编辑器编辑脚本文件。2.3、将以下脚本内容粘贴到文件中，并用您的信息替换 &lt;YOUR_EMAIL&gt;、&lt;YOUR_API_KEY&gt;、&lt;YOUR_ZONE_ID&gt; 和 &lt;YOUR_DOMAIN&gt;。 12345678910111213#!/bin/bashEMAIL=&quot;&lt;YOUR_EMAIL&gt;&quot;API_KEY=&quot;&lt;YOUR_API_KEY&gt;&quot;ZONE_ID=&quot;&lt;YOUR_ZONE_ID&gt;&quot;DOMAIN=&quot;&lt;YOUR_DOMAIN&gt;&quot;IP=\\$(curl -s https://api.ipify.org)curl -X PUT &quot;https://api.cloudflare.com/client/v4/zones/\\$ZONE_ID/dns_records/\\$DOMAIN&quot; \\ -H &quot;Authorization: Bearer \\$API_KEY&quot; \\ -H &quot;Content-Type: application/json&quot; \\ --data &quot;{\\&quot;type\\&quot;:\\&quot;A\\&quot;,\\&quot;name\\&quot;:\\&quot;\\$DOMAIN\\&quot;,\\&quot;content\\&quot;:\\&quot;\\$IP\\&quot;,\\&quot;ttl\\&quot;:120,\\&quot;proxied\\&quot;:false}&quot; 2.4、保存并退出编辑器。 3、运行 DDNS 脚本3.1、打开终端或命令行界面。3.2、导航到您保存脚本文件的目录。3.3、运行脚本：bash cloudflare_ddns.sh 4、定时更新 DDNS 记录4.1、您可以使用定时任务来定期运行 DDNS 脚本，以便在 IP 地址变化时自动更新域名解析记录。以下是一个 cron 示例，将 DDNS 脚本每小时运行一次。4.2、打开终端或命令行界面。4.3、输入 crontab -e 并按 Enter 键。4.4、在 crontab 编辑器中添加以下行，然后保存并关闭编辑器： 1*/1 * * * * /bin/bash /path/to/cloudflare_ddns.sh 将 /path/to/cloudflare_ddns.sh 替换为实际脚本文件的路径。","link":"/cloudflaredns/"},{"title":"Linux上更换DNS设置的教程","text":"正确配置您的DNS设置可以帮助您更快地上网浏览和更安全的在线体验。根据您的Linux发行版及其版本，有多种方法可以访问网络配置。本指南将重点介绍命令行界面以获得更广泛的兼容性。 1、备份您当前的设置在进行任何更改之前，最好备份当前的网络配置： 1cp /etc/resolv.conf /etc/resolv.conf.backup 此命令将您当前的DNS设置复制到备份文件 2、编辑DNS设置2.1、使用文本编辑器（例如vim）打开 resolv.conf 文件 1vim /etc/resolv.conf 2.2、进入编辑器后，您会看到以 nameserver 开头的行。这些行表示您当前的DNS设置。2.3、要更改DNS，您可以编辑现有的 nameserver 行或添加新行。例如，要使用Google的公共DNS，添加： 12nameserver 8.8.8.8nameserver 8.8.4.4 2.4、保存并退出编辑器。 3、重新启动网络服务为了使更改生效，您可能需要重新启动网络服务： 1systemctl restart NetworkManager 或者，根据您的Linux发行版： 1/etc/init.d/networking restart 4、验证DNS更改为确保您的DNS设置已更新，您可以使用： 1cat /etc/resolv.conf","link":"/modifydnsonlinux/"},{"title":"DNSEXIT的DDNS自动化配置","text":"DNSExit从2001年开始提供免费域名DNS解析和动态DNS解析, 后续又陆续推出了免费二级域名、免费企业邮箱、免费SSL安全证书等免费服务。DNSExit提供了.work.gd、.line.pm、.linkpc.net、.run.place、.publicvm.com这几种免费二级域名供你选择注册, 同样也具有域名DNS解析及动态DNS解析功能，但不支持修改DNS服务器，也就是只能用DNSExit提供的DNS解析功能。DNSExit免费二级域名最多开通1年，可在到期前30天免费续期。另外提醒一下，DNSExit的免费二级域名在有些省份被屏蔽使用了，个人测试还可以用一下，不要用在重要场合。查询域名是否被拦截污染可以用拨测。DNSExit免费企业邮箱，有100M容量，可建立2个邮箱，支持邮件转发，支持POP3、IMAP、SMTP及网页收发邮件，每天限制对外发送20封邮件。DNSExit免费企业邮箱一次只能开通1年，不过可以在到期前的45天内免费续期。DNSExit还提供了一键申请Let’s Encrypt的免费SSL安全证书，支持泛解析域名SSL证书，可无限子域名使用，免费证书有效期90天，可在到期前30天免费续期。 1、自动化本机DDNS的脚本： 1234567891011121314151617181920212223242526272829303132333435363738394041#!/bin/bashDNSAPIKEY=[apikey]DNSHOST=[domain]WANIPSITE=&quot;http://ipv4.icanhazip.com&quot;WAN_IP=$(curl -s ${WANIPSITE})WAN_IP_FILE=wanip.txt# Get current and old WAN IPif [ -f $WAN_IP_FILE ]; then OLD_WAN_IP=$(cat $WAN_IP_FILE)else echo &quot;No File, Need IP&quot; OLD_WAN_IP=&quot;&quot;fi# If WAN IP is unchanged, exit hereif [ &quot;$WAN_IP&quot; = &quot;$OLD_WAN_IP&quot; ]; then echo &quot;Local Check: IP not changed. Exiting...&quot; exit 0fi# If WAN is changed, update！echo &quot;Updating DNS to $WAN_IP&quot;RESPONSE=$(curl -s https://api.dnsexit.com/dns/ud/?apikey=$DNSAPIKEY -d host=$DNSHOST)# Check the response codeCODE=$(echo $RESPONSE | jq -r '.code')if [ &quot;$CODE&quot; -eq 0 ]; then echo &quot;Remote Response: DNS update successful. Exiting...&quot; echo $WAN_IP &gt; $WAN_IP_FILE echo -e &quot;Updated successfully!&quot; exit 0elif [ &quot;$CODE&quot; -eq 1 ]; then echo &quot;Remote Response: IP not changed. Exiting...&quot; echo $WAN_IP &gt; $WAN_IP_FILEelse echo &quot;Remote Response: $RESPONSE&quot; exit 1fi 2、通用方式（包括修改、增加DNS的操作）命令的格式如下： 1curl -H &quot;Content-Type: application/json&quot; --data @/path/jason-file https://api.dnsexit.com/dns/ Json文件如下格式： 2.1、更新IPV412345678910{ &quot;apikey&quot;: &quot;API-KEY&quot;, &quot;domain&quot;: &quot;example.com&quot;, &quot;update&quot;: { &quot;type&quot;: &quot;A&quot;, &quot;name&quot;: &quot;example.com&quot;, &quot;content&quot;: &quot;1.1.1.1&quot;, &quot;ttl&quot;: 480 }} 2.2、更新CNAME12345678910{ &quot;apikey&quot;: &quot;API-KEY&quot;, &quot;domain&quot;:&quot;example.com&quot;, &quot;update&quot;:{ &quot;type&quot;:&quot;CNAME&quot;, &quot;name&quot;:&quot;mail&quot;, //or &quot;name&quot;:&quot;mail.example.com&quot; &quot;content&quot;:&quot;mail.yahoo.com&quot;, //point to mail.yahoo.com instead &quot;ttl&quot;:480 //ttl value is in minutes 480 = 6 hours }} 2.3、新增IPV412345678910{ &quot;apikey&quot;: &quot;API-KEY&quot;, &quot;domain&quot;:&quot;example.com&quot;, &quot;add&quot;:{ &quot;type&quot;:&quot;A&quot;, &quot;name&quot;:&quot;host1&quot;, //same as host1.example.com &quot;content&quot;:&quot;1.1.2.2&quot;, //IP of the host &quot;ttl&quot;:480 }} 2.4、新增CNAME12345678910{ &quot;apikey&quot;: &quot;API-KEY&quot;, &quot;domain&quot;:&quot;example.com&quot;, &quot;add&quot;:{ &quot;type&quot;:&quot;CNAME&quot;, &quot;name&quot;:&quot;mail&quot;, //this actually setup mail.example.com points to mail.yahoo.com &quot;content&quot;:&quot;mail.yahoo.com&quot;, //content is the canonical host name &quot;ttl&quot;:480 //ttl value is in minutes 480 = 6 hours }} 2.5、删除CNAME12345678{ &quot;apikey&quot;: &quot;API-KEY&quot;, &quot;domain&quot;:&quot;example.com&quot;, &quot;delete&quot;:{ &quot;type&quot;:&quot;CNAME&quot;, &quot;name&quot;:&quot;mail&quot; //instead you can put mail.example.com }}","link":"/dnsexitapi/"},{"title":"Json操作","text":"修改Json文件中的某项值假设有Json文件n.json，内容如下： 12345678{ &quot;ofdfzpzc&quot;: { &quot;krcmqd&quot;: &quot;_a2W5j93p7PgKp&quot;, &quot;gcrdn&quot;: -205118896.62164715 }, &quot;xwzztgrnxasc&quot;: -1855478139.7060483022, &quot;fqivnuwadwv&quot;: -1600074029.0195124} 现在想把xwzztgrnxasc的值修改为2022，可以用如下语句修改： 1jq '.xwzztgrnxasc=2022' n.json &gt; conf.tmp &amp;&amp; mv conf.tmp n.json","link":"/aboutjson/"},{"title":"Xray配置方法【直连、做中转、做落地】","text":"本配置包含了一台海外的VPS做直连机、做中转机、做落地机的所有配置。 1、直连机使用的为 inbounds:IN-VLESS，协议为 xtls-rprx-vision 2、中转机分别用不同的端口对于不同的落地机落地机A：inbounds:IN-VLESS-205 -&gt; outbounds:OUT-SOCKS-205, 翻墙用的协议为 xtls-rprx-vision，翻墙后用socks5协议连落地机A落地机B：inbounds:IN-VLESS-179 -&gt; outbounds:OUT-SOCKS-179, 翻墙用的协议为 xtls-rprx-vision，翻墙后用socks5协议连落地机B 3、落地机inbounds:IN-SOCKS, 落地协议为socks5 4、具体配置 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233{ &quot;log&quot;: { &quot;loglevel&quot;: &quot;none&quot;, &quot;access&quot;: &quot;none&quot;, &quot;error&quot;: &quot;none&quot; }, &quot;inbounds&quot;: [ { &quot;tag&quot;: &quot;IN-VLESS&quot;, &quot;listen&quot;: &quot;0.0.0.0&quot;, &quot;port&quot;: 443, &quot;protocol&quot;: &quot;vless&quot;, &quot;settings&quot;: { &quot;clients&quot;: [ { &quot;id&quot;: &quot;UUID&quot;, &quot;flow&quot;: &quot;xtls-rprx-vision&quot; } ], &quot;decryption&quot;: &quot;none&quot; }, &quot;streamSettings&quot;: { &quot;network&quot;: &quot;tcp&quot;, &quot;security&quot;: &quot;reality&quot;, &quot;realitySettings&quot;: { &quot;show&quot;: false, &quot;dest&quot;: &quot;www.icloud.com:443&quot;, &quot;xver&quot;: 0, &quot;serverNames&quot;: [ &quot;icloud.com&quot;, &quot;www.icloud.com&quot; ], &quot;privateKey&quot;: &quot;PRIVATEKEY&quot;, &quot;minClientVer&quot;: &quot;&quot;, &quot;maxClientVer&quot;: &quot;&quot;, &quot;maxTimeDiff&quot;: 0, &quot;shortIds&quot;: [ &quot;88&quot;, &quot;888888&quot; ] } } }, { &quot;tag&quot;: &quot;IN-VLESS-205&quot;, &quot;listen&quot;: &quot;0.0.0.0&quot;, &quot;port&quot;: 10800, &quot;protocol&quot;: &quot;vless&quot;, &quot;settings&quot;: { &quot;clients&quot;: [ { &quot;id&quot;: &quot;UUID&quot;, &quot;flow&quot;: &quot;xtls-rprx-vision&quot; } ], &quot;decryption&quot;: &quot;none&quot; }, &quot;streamSettings&quot;: { &quot;network&quot;: &quot;tcp&quot;, &quot;security&quot;: &quot;reality&quot;, &quot;realitySettings&quot;: { &quot;show&quot;: false, &quot;dest&quot;: &quot;www.icloud.com:443&quot;, &quot;xver&quot;: 0, &quot;serverNames&quot;: [ &quot;icloud.com&quot;, &quot;www.icloud.com&quot; ], &quot;privateKey&quot;: &quot;PRIVATEKEY&quot;, &quot;minClientVer&quot;: &quot;&quot;, &quot;maxClientVer&quot;: &quot;&quot;, &quot;maxTimeDiff&quot;: 0, &quot;shortIds&quot;: [ &quot;88&quot;, &quot;888888&quot; ] } } }, { &quot;tag&quot;: &quot;IN-VLESS-179&quot;, &quot;listen&quot;: &quot;0.0.0.0&quot;, &quot;port&quot;: 3389, &quot;protocol&quot;: &quot;vless&quot;, &quot;settings&quot;: { &quot;clients&quot;: [ { &quot;id&quot;: &quot;UUID&quot;, &quot;flow&quot;: &quot;xtls-rprx-vision&quot; } ], &quot;decryption&quot;: &quot;none&quot; }, &quot;streamSettings&quot;: { &quot;network&quot;: &quot;tcp&quot;, &quot;security&quot;: &quot;reality&quot;, &quot;realitySettings&quot;: { &quot;show&quot;: false, &quot;dest&quot;: &quot;www.icloud.com:443&quot;, &quot;xver&quot;: 0, &quot;serverNames&quot;: [ &quot;icloud.com&quot;, &quot;www.icloud.com&quot; ], &quot;privateKey&quot;: &quot;PRIVATEKAY&quot;, &quot;minClientVer&quot;: &quot;&quot;, &quot;maxClientVer&quot;: &quot;&quot;, &quot;maxTimeDiff&quot;: 0, &quot;shortIds&quot;: [ &quot;88&quot;, &quot;888888&quot; ] } } }, { &quot;tag&quot;: &quot;IN-SOCKS&quot;, &quot;listen&quot;: &quot;0.0.0.0&quot;, &quot;port&quot;: 10810, &quot;protocol&quot;: &quot;socks&quot;, &quot;sniffing&quot;: { &quot;enabled&quot;: true, &quot;destOverride&quot;: [ &quot;http&quot;, &quot;tls&quot; ], &quot;routeOnly&quot;: false }, &quot;settings&quot;: { &quot;auth&quot;: &quot;password&quot;, &quot;udp&quot;: true, &quot;allowTransparent&quot;: false, &quot;accounts&quot;: [ { &quot;user&quot;: &quot;USERNAME&quot;, &quot;pass&quot;: &quot;PASSWORD&quot; } ] } } ], &quot;outbounds&quot;: [ { &quot;protocol&quot;: &quot;freedom&quot;, &quot;tag&quot;: &quot;direct&quot; }, { &quot;tag&quot;: &quot;OUT-SOCKS-205&quot;, &quot;protocol&quot;: &quot;socks&quot;, &quot;settings&quot;: { &quot;servers&quot;: [ { &quot;address&quot;: &quot;HOST A IP&quot;, &quot;ota&quot;: false, &quot;port&quot;: HOST A SOCKS5 PORT, &quot;level&quot;: 1, &quot;users&quot;: [ { &quot;user&quot;: &quot;HOST A SOCKS USERNAME&quot;, &quot;pass&quot;: &quot;HOST A SOCKS PASSWORD&quot;, &quot;level&quot;: 1 } ] } ] }, &quot;streamSettings&quot;: { &quot;network&quot;: &quot;tcp&quot; }, &quot;mux&quot;: { &quot;enabled&quot;: false, &quot;concurrency&quot;: -1 } }, { &quot;tag&quot;: &quot;OUT-SOCKS-179&quot;, &quot;protocol&quot;: &quot;socks&quot;, &quot;settings&quot;: { &quot;servers&quot;: [ { &quot;address&quot;: &quot;HOST B IP&quot;, &quot;ota&quot;: false, &quot;port&quot;: HOST B SOCKS5 PORT, &quot;level&quot;: 1, &quot;users&quot;: [ { &quot;user&quot;: &quot;HOST B SOCKS USERNAME&quot;, &quot;pass&quot;: &quot;HOST B SOCKS PASSWORD&quot;, &quot;level&quot;: 1 } ] } ] }, &quot;streamSettings&quot;: { &quot;network&quot;: &quot;tcp&quot; }, &quot;mux&quot;: { &quot;enabled&quot;: false, &quot;concurrency&quot;: -1 } }, { &quot;protocol&quot;: &quot;blackhole&quot;, &quot;tag&quot;: &quot;blocked&quot; } ], &quot;dns&quot;: { &quot;servers&quot;: [ &quot;8.8.8.8&quot;, &quot;1.1.1.1&quot; ] }, &quot;routing&quot;: { &quot;domainStrategy&quot;: &quot;AsIs&quot;, &quot;rules&quot;: [ { &quot;type&quot;: &quot;field&quot;, &quot;inboundTag&quot;: [ &quot;IN-VLESS-205&quot; ], &quot;outboundTag&quot;: &quot;OUT-SOCKS-205&quot; }, { &quot;type&quot;: &quot;field&quot;, &quot;inboundTag&quot;: [ &quot;IN-VLESS-179&quot; ], &quot;outboundTag&quot;: &quot;OUT-SOCKS-179&quot; } ] }}","link":"/xrayconfig/"}],"tags":[{"name":"IP","slug":"IP","link":"/tags/IP/"},{"name":"Git","slug":"Git","link":"/tags/Git/"},{"name":"Nginx","slug":"Nginx","link":"/tags/Nginx/"},{"name":"Json","slug":"Json","link":"/tags/Json/"},{"name":"DNS","slug":"DNS","link":"/tags/DNS/"}],"categories":[{"name":"Web","slug":"Web","link":"/categories/Web/"},{"name":"NetWork","slug":"NetWork","link":"/categories/NetWork/"}],"pages":[{"title":"tags","text":"","link":"/tags/index.html"},{"title":"categories","text":"","link":"/categories/index.html"}]}